generator client {
  provider       = "prisma-client-js"
  prviewFeatures = ["deriveAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?   @unique
  role          String
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Patient {
  id              Int      @id @default(autoincrement())
  username        String?  @unique
  password        String?  @unique
  doctorassigned  Int?
  patientverified Boolean? @default(false)
  image           String?
  patientid       BigInt?  @unique
  role            Role?    @default(patient)
  about           String?
  age             String?
  sex             String?
  email           String   @unique
  illness         String[]
  name            String?
  doctor          Doctor?  @relation(fields: [doctorassigned], references: [doctorid])
}

model Doctor {
  doctorid       Int       @id @unique @default(autoincrement())
  doctorverified Boolean?  @default(false)
  governmentid   String?   @unique
  name           String?
  email          String?
  lastname       String?
  sex            Sex       @default(Male)
  phone          BigInt?
  address        String?
  about          String?
  patient_id     String?
  specialization String?
  image          String?
  rating         String?
  hospitalid     Int?
  hospital       Hospital? @relation(fields: [hospitalid], references: [id])
  dob            DateTime?
  patients       Patient[]
}

model Hospital {
  id               Int      @id @default(autoincrement())
  ambulancecount   Int?
  bedcount         Int?
  hospitalname     String?
  hospitaladdress  String?
  hospitalphone    BigInt?
  hospitalverified Boolean? @default(false)
  hospitalimage    String?
  doctors          Doctor[] // Add the opposite relation field

  @@map("hospitals") //map a specific table name to the model in the database schema
}

enum Role {
  patient
  doctor
  admin
}

enum Sex {
  Male
  Female
}
